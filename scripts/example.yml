Service: servicename

# contains a function def run(stage):
# input:
  # stage: [string]
# return: both keys are optional, but a dict is required
  # {
  #   error: [error string] ## if present, throws abort
  #   env: { [k]:[v]... } ## vars to insert into env
  # }
PreDeploy: preDeploy.py

# contains a function def run(stage, outputs):
# input:
  # stage: [string]
  # outputs:
  # {
  #   [stackname]: {
  #     arn: [val],
  #     outputs: {
  #       [k]: [v]
  #     },
  #   }
  # }
# no return value expected
PostDeploy: postDeploy.py

Stacks:
  # Global variables used in every stack (Optional)
  #  Anything specified here will be overwritten if something by the same name is specified in a stack
  Global:
    Tags:
      Name: $SERVICE-$STAGE
      Owner: ${USER}
      Contact: ${USER}@nd.edu
      Description: will be overwritten
    Parameters:
      GlobalParam: usedInEveryStack
      Stage: will be overwritten
  # Individual stack specifications (At least one is required)
  Single:
    - Name: $SERVICE-$STAGE
      Template: root.yml
      Tags:
        Description: Root Stack
      Parameters:
        ServiceName: $SERVICE-$STAGE
        Stage: $STAGE
        TemplateBucket: $DEPLOY_BUCKET
        TemplateFolder: $DEPLOY_FOLDER
      Gateways:
        - GatewayIdInOutputsOfStack

    - Name: $SERVICE-$STAGE-lambdas
      Template: lambdas.yml

Artifacts:
  Templates:
    - root.yml
    - kms.yml
    - lambdas.yml
  Zips:
    -
      Name: code
      Files:
        - ../hesburgh
        - ../lambdaRequests
        - ../serviceRequests
        - ../testdata
        - ../alephQuery.py
        - ../joinHandler.py
        - ../serviceHandler.py

LambdaEnv:
  # Similar to Stack.Global, optional variables for every function
  Global:
    KMSKey: alias/$SERVICE-$STAGE
    Environment:
      - Name: ENV_VAR
        Value: will be overwritten
  Single:
    - FunctionName: $SERVICE-$STAGE-function
      # KMSKey is optional, if not specified here or in the global scope values will be put in cleartext
      KMSKey: overwrite global key
      Environment:
        -
          Name: ENV_VAR
          Value: ${ENV_VAR}
        -
          Name: SECOND_VAR
          Value: ${SECOND_VAR}
